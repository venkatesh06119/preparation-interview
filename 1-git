
DAY-01: INTRO, BASIC COMMANDS

what is git ? 

it is a version control system and source code management
it will maintain multiple versions of the same file
it is free and open-source
They can handle larger projects efficiently
They save time and developers can fetch and create pull requests

STAGES OF GIT:

1. WORKING DIRECTORY: we write the source code.
2. STAGING AREA: We can track the source code. is also called as draft space.
3. REPO: we can store our tracked code. (.git is your local repo)


CREATE A SERVER
INSTALLATION:

mkdir swiggy  (mkdir is to create a folder)
cd swiggy  (cd is to go inside folder)
yum install git -y
git init  (to get .git folder)  - your local empty git repository.



[root@ip-172-31-37-109 git-2]# git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint:   git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint:   git branch -m <name>
Initialized empty Git repository in /root/git-2/.git/




touch file2	: create a file
git status	: to check the file is tracking or not
git add file2	: to track the file2
git commit -m "abc" file2: to store the tracked file2
git log		: to show the commits 
git log --oneline : to show the commits on single line

HISTORY:

 
  

=================================================

DAY-02: BRANCHES, MERGE REBASE

BRANCH:
Branch means an individual line of development.
we can develop the code separately.
Each feature on the application was initially developed on an individual branch only.
the default branch is master.
we need to do initial commit for the master branch.


COMMANDS:

git branch		: to list the branches
git branch branch_name	: to create the branch
git checkout branch_name: to switch to another branch
git checkout -b branch_name: to create and switch at same time
git branch -D branch_name: to delete the branch
git branch -m old new 	: to rename a branch

MERGE: add files in one branch to another branch.

git checkout master
git merge photos

REBASE: add files in one branch to another branch.

git checkout master
git rebase photos



========================================

DAY-03:

GITHUB:
its a place where we can store code on internet.
everyone can access the code.
daily we can do push and pull activites.


git remote add origin https://github.com/venkatesh06119/my-class-notes-space.git

github removed password option in aug 2021, from then we are using tokens.
Token will be visible only once.

token  -  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


Settings -- > Developer Settings -- > personal access token -- > classic -- > generate tokne -- > classic -- > 



GIT PUSH: To send files from local (.git) to remote/central (GitHub)
git push origin branch_name


GIT PUSH: To receive files from central (GitHub) to local (.git)
git pull origin branch_name



===========================================================================
DAY-04:

MERGE CONFLICTS:
WHEN WE MERGE 2 DIFFERENT BRANCHES WITH COMMON FILES WITH DIFFERENT CONTENT CONFLICTS WILL OCCUR.
WE NEED TO RESOLVE THESE CONFICTS MANUALLY.



GIT CLONE: GETTING THE REPOSITORY TO LOCAL 
GIT FORK: GETTING THE REPOSITORY TO GITHUB

CLONE VS PULL
REPOSITORY: CLONE 
FILE: PULL 

FETCH VS PULL:
To get the difference in files : PULL
To show the difference in files: FETCH

git pull origin master
git fetch origin master

CHERRY-PICK:
To get specific files to one branch to another branch 


COMMANDS:
PUSH: git push origin master
PULL: git pull origin master
FETCH: git fecth 
CLONE: git clone repo_url
CHERRY-PICK: git cherry-pick commit_id

HISTORY:

=================================================================

GIT STASH: used to hide the files which are not committed.

git stash	: to stash the files
git stash list	: to list the stashes
git stash apply : to unstash the files
git stash pop	: to remove last stash 
git stash clear	: to remove all stash 


GIT REVERT: To undo the merging blw branches.
git revert branch_name 

if we do revert on local it wont create a new branch
if we do revert on github it will create a new branch
to revert first we need to merge two branches

revert -- > merge -- > branches -- > commit -- > .git

GIT RESTORE: Used to undo the tracked files.
git restore --staged file_name
git rm --cached file_name

GIT SHOW: to show the files for the commits.
git show commit_id

.gitignore: to ignore the files which we dont want.
it wil not tarck and commit the files.

SETTINGS:
git config user.name "raham"
git config user.email "raham@gamil.com"



  

=================================git - interview quesitions ============================

1. what is github ?
    GitHub is a code hosting platform for version control and collaboration
    its a place where we can store code on internet.
    everyone can access the code.
    daily we can do push and pull activites.

2. How to use GitHub?
     Step 0: Install git and create a GitHub account. ...
     Step 1: Create a local git repository. ...
     Step 2: Add a new file to the repo. ...
     Step 3: Add a file to the staging environment. ...
     Step 4: Create a commit. ...
     Step 5: Create a new branch.
     step 6: Now push that branch to the repo

3. What is a Branch in GitHub?
    BRANCH:
    Branch means an individual line of development.
    we can develop the code separately.
    Each feature on the application was initially developed on an individual branch only.
    the default branch is master.
    we need to do initial commit for the master branch.

4. What is a git Pull?
     To receive files from central (GitHub) to local (.git)
     To get the difference in files : PULL
    
5. What is meant by Git repository?
    Git is a program that tracks changes made to files. ... A Git repository is the. git/ folder inside a      
    project. This repository tracks all changes made to files in your project, building a history over time


Q. What is meant by fork in GitHub?
A. Fork is a rough copy of the repository which allows you to test and debug the changes with 
changes and it does not affect the original code anymore.

Q. What is the difference between a fork and a branch in Git?
A. Branching and forking provide two ways of diverging from the main code line. ... So, unlike a      
branch, a fork is independent from the original repository. If the original repository is deleted, the      
fork remains. If you fork a repository, you get that repository and all of its branches.

Q. What is Git Fetch?
A. git fetch is the command that tells your local git to retrieve the latest meta-data info from the     
original
To show the difference in files: FETCH

Q. What is .gitignore file ?
A. if you want to ignore some specific siles you can mention where and those files wonâ€™t be tracked
anymore
.gitignore: to ignore the files which we dont want.
it wil not tarck and commit the files.

Q. What is the difference between Master and Main Branch?
A. when you start extracting files and implementing it automatically you will get the main branch 
there so there you have to do all the activities merge, pull ... and eventually it all goes to the master branch.

Q. Which generation is the Git comes under?
A. Git comes under 3 rd. generation of VCS.


























=========================================

