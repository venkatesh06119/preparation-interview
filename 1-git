
DAY-01: INTRO, BASIC COMMANDS

what is git ? 

it is a version control system and source code management
it will maintain multiple versions of the same file
it is free and open-source
They can handle larger projects efficiently
They save time and developers can fetch and create pull requests

STAGES OF GIT:

1. WORKING DIRECTORY: we write the source code.
2. STAGING AREA: We can track the source code. is also called as draft space.
3. REPO: we can store our tracked code. (.git is your local repo)


CREATE A SERVER
INSTALLATION:

mkdir swiggy  (mkdir is to create a folder)
cd swiggy  (cd is to go inside folder)
yum install git -y
git init  (to get .git folder)  - your local empty git repository



[root@ip-172-31-37-109 git-2]# git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint:   git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint:   git branch -m <name>
Initialized empty Git repository in /root/git-2/.git/




touch file2	: create a file
git status	: to check the file is tracking or not
git add file2	: to track the file2
git commit -m "abc" file2: to store the tracked file2
git log		: to show the commits 
git log --oneline : to show the commits on single line

HISTORY:

  1  ll
    2  mkdir swiggy
    3  cd swiggy/
    4  yum install git -y
    5  ll
    6  ll -a
    7  git init
    8  ll -a
    9  vim file1
   10  ll
   11  git status
   12  git add file1
   13  git status
   14  git commit -m "commit-1" file1
   15  git status
   16  touch file2
   17  git status
   18  git add file2
   19  git status
   20  git commit -m "commit-2" file2
   21  git status
   22  ll
   23  git log
   24  git log --oneline
   25  touch file3
   26  git status
   27  git add file3
   28  git status
   29  git commit -m "commit-3" file3
   30  git log
   31  history

=================================================

DAY-02: BRANCHES, MERGE REBASE

BRANCH:
Branch means an individual line of development.
we can develop the code separately.
Each feature on the application was initially developed on an individual branch only.
the default branch is master.
we need to do initial commit for the master branch.


COMMANDS:

git branch		: to list the branches
git branch branch_name	: to create the branch
git checkout branch_name: to switch to another branch
git checkout -b branch_name: to create and switch at same time
git branch -D branch_name: to delete the branch
git branch -m old new 	: to rename a branch

MERGE: add files in one branch to another branch.

git checkout master
git merge photos

REBASE: add files in one branch to another branch.

git checkout master
git rebase photos

HISTORY:
 1  mkdir swiggy
    2  cd swiggy/
    3  yum install git -y
    4  ll -a
    5  git init
    6  ll -a
    7  git branch
    8  touch index.html
    9  git status
   10  git add index.html
   11  git commit -m "commit-1" index.html
   12  git branch
   13  git branch photos
   14  git branch
   15  git checkout photos
   16  git branch
   17  touch photos{1..5}
   18  git status
   19  git add *
   20  git commit -m "dev-1 commits" *
   21  ll
   22  git branch
   23  git branch reels
   24  git branch
   25  git checkout reels
   26  ll
   27  touhc reels{1..5}
   28  touch reels{1..5}
   29  ll
   30  git status
   31  git add *
   32  git status
   33  git commit -m "dev-2 commits" *
   34  git branch
   35  git checkout -b vcalls
   36  git branch
   37  ll
   38  touch vcalls{1..5}
   39  git add *
   40  git commit -m "dev-3 commits" *
   41  ll
   42  git branch
   43  git checkout -b promotions
   44  touch promotions{1..5}
   45  git add *
   46  git commit -m "dev-4 commits" *
   47  git branch
   48  git checkout master
   49  ll
   50  git merge photos
   51  ll
   52  git merge reels
   53  ll
   54  git rebase vcalls
   55  ll
   56  git rebase promotions
   57  ll
   58  git branch
   59  ll
   60  git branch
   61  git branch -D vcalls
   62  git branch
   63  git branch -D reels
   64  git branch
   65  git branch -m photos abc
   66  git branch
   67  git branch -m promotions def
   68  git branch
   69  ll
   70  history

========================================

DAY-03:

GITHUB:
its a place where we can store code on internet.
everyone can access the code.
daily we can do push and pull activites.


git remote add origin https://github.com/venkatesh06119/my-class-notes-space.git

github removed password option in aug 2021, from then we are using tokens.
Token will be visible only once.

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


Settings -- > Developer Settings -- > personal access token -- > classic -- > generate tokne -- > classic -- > 



GIT PUSH: To send files from local (.git) to remote/central (GitHub)
git push origin branch_name


GIT PUSH: To receive files from central (GitHub) to local (.git)
git pull origin branch_name


HISTORY:
  1  mkdir instagram
    2  cd instagram/
    3  yum install git -y
    4  git init
    5  ll -a
    6  touch index.html
    7  git add index.html
    8  git commit -m "commit-1" index.html
    9  git branch
   10  git branch photos
   11  git branch
   12  git checkout photos
   13  git branch
   14  touch photos{1..5}
   15  git add *
   16  git commit -m "dev-1 commits" *
   17  git checkout -b reels
   18  git branch
   19  touch reels{1..5}
   20  git add *
   21  git commit -m "dev-2 commits" *
   22  ll
   23  git checkout -b vcalls
   24  git branch
   25  touch  vcalss{1..5}
   26  git add *
   27  git commit -m "dev-3 commits"
   28  git branch
   29  git checkout photos
   30  ll
   31  git checkout -b promotions
   32  ll
   33  touch promotions{1..5}
   34  git add *
   35  git commit -m "dev-4 commits"
   36  git branch
   37  git checkout master
   38  ll
   39  git merge photos
   40  git merge reels
   41  ll
   42  git rebase vcalls
   43  ll
   44  git rebase promotions
   45  ll
   46  git branch
   47  git remote add origin https://github.com/mohammedowais641/instagram.git
   48  ls -a
   49  git branch
   50  git push origin photos
   51  git push origin reels
   52  git push origin vcalls
   53  git checkout promotions
   54  ll
   55  git push origin promotions
   56  git branch
   57  ll
   58  git pull origin promotions
   59  cat index.html
   60  git pull origin promotions
   61  cat index.html
   62  history
   63 abcd
   64  xyz
===========================================================================
DAY-04:

MERGE CONFLICTS:
WHEN WE MERGE 2 DIFFERENT BRANCHES WITH COMMON FILES WITH DIFFERENT CONTENT CONFLICTS WILL OCCUR.
WE NEED TO RESOLVE THESE CONFICTS MANUALLY.



GIT CLONE: GETTING THE REPOSITORY TO LOCAL 
GIT FORK: GETTING THE REPOSITORY TO GITHUB

CLONE VS PULL
REPOSITORY: CLONE 
FILE: PULL 

FETCH VS PULL:
To get the difference in files : PULL
To show the difference in files: FETCH

git pull origin master
git fetch origin master

CHERRY-PICK:
To get specific files to one branch to another branch 


COMMANDS:
PUSH: git push origin master
PULL: git pull origin master
FETCH: git fecth 
CLONE: git clone repo_url
CHERRY-PICK: git cherry-pick commit_id

HISTORY:

=================================================================

GIT STASH: used to hide the files which are not committed.

git stash	: to stash the files
git stash list	: to list the stashes
git stash apply : to unstash the files
git stash pop	: to remove last stash 
git stash clear	: to remove all stash 


GIT REVERT: To undo the merging blw branches.
git revert branch_name 

if we do revert on local it wont create a new branch
if we do revert on github it will create a new branch
to revert first we need to merge two branches

revert -- > merge -- > branches -- > commit -- > .git

GIT RESTORE: Used to undo the tracked files.
git restore --staged file_name
git rm --cached file_name

GIT SHOW: to show the files for the commits.
git show commit_id

.gitignore: to ignore the files which we dont want.
it wil not tarck and commit the files.

SETTINGS:
git config user.name "raham"
git config user.email "raham@gamil.com"


HISTORY:

 1  mkdir abcd
    2  cd abcd/
    3  yum install git -y
    4  git init
    5  git --version
    6  git -v
    7  git branch
    8  touch index.html
    9  git add index.html
   10  git commit -m "commit-1" index.html
   11  git log
   12  touch java1
   13  git status
   14  git add java1
   15  git status
   16  ll
   17  git stash
   18  ll
   19  git stash list
   20  git stash apply
   21  ll
   22  git stash list
   23  git stash pop
   24  git stash list
   25  ll
   26  git stash
   27  git stash list
   28  ll
   29  git stash apply
   30  git stash list
   31  git stash clear
   32  git stash list
   33  git add java1
   34  git commit -m "java" java1
   35  ll
   36  git checkout -b branch2
   37  ll
   38  touch python{1..5}
   39  git add *
   40  git commit -m "python"
   41  git branch
   42  git checkout master
   43  git merge branch2
   44  ll
   45  git revert branch2
   46  ll
   47  git branch
   48  ll
   49  git status
   50  touch java2
   51  git status
   52  git add java2
   53  git status
   54  git restore --staged java2
   55  git status
   56  touch java3
   57  git add java2 java3
   58  git status
   59  git restore --staged *
   60  git status
   61  git log
   62  git log --oneline
   63  git log --oneline -2
   64  git show 0945167
   65  git log
   66  git show 335436555b74a91798cd78399bb614a9d16b5bc6
   67  git show java1
   68  git diff java1
   69  ll
   70  vim java1
   71  git add java1
   72  git commit -m "java-1 commit2"  java1
   73  git diff java1
   74  git show java1
   75  git clone https://github.com/RAHAMSHAIK007/swiggy-project.git
   76  git branch
   77  ;;
   78  ll
   79  touch php{1..10}
   80  ll
   81  git status
   82  vim .gitignore
   83  git status
   84  ll
   85  git status
   86  vim .gitignore
   87  git status
   88  ll
   89  git add php1
   90  git log
   91  git config user.name "raham"
   92  git config user.email "raham@gamil.com"
   93  git log
   94  git add java2
   95  git commut -m "jav22" java
   96  git commit -m "jav22" java2
   97  git log
   98  history






